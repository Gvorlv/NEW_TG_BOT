import os
import re
import logging
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from pydub import AudioSegment
from openai import AsyncOpenAI
from dotenv import load_dotenv
from io import BytesIO
from gtts import gTTS
from typing import Dict
from telegram import Update
from telegram.constants import ParseMode
from telegram import Bot
from telegram.constants import ChatAction
import asyncio
import telegram.error
from telegram.ext import (
    Application,
    CommandHandler,
    ChatMemberHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext,
    Defaults
)
from pydub.playback import play
import requests
import pickle
import pprint
import json
import aiohttp
import httpx
import time
from datetime import datetime
from telegram.request import HTTPXRequest  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º HTTPXRequest –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏

load_dotenv()

##########
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get("TOKEN")
GPT_SECRET_KEY = os.environ.get("GPT_SECRET_KEY")
os.environ["OPENAI_API_KEY"] = GPT_SECRET_KEY

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∞–π–º–∞—É—Ç–∞
bot = Bot(token=TOKEN)

clientOAI = AsyncOpenAI()   
MODEL_TURBO_0125 = "gpt-3.5-turbo-0125"
MODEL_VI = "gpt-4-vision-preview"
MODEL_4 = "gpt-4"
model_4o_mini = 'gpt-4o-mini'
model_4o = 'gpt-4o'
model = model_4o_mini

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

url_BZ = ''
temperature = 0
count_type = ''
top_similar_documents = 10
trash_hold = 0 

embeddings = OpenAIEmbeddings()
client = AsyncOpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

system = '''
# –ü–µ—Ä—Å–æ–Ω–∞–∂
–¢—ã-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤ —Å–µ—Ç–∏ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫ –ó–¥–æ—Ä–æ–≤—å–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è –æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ–¥–∞–µ—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –∏ –∑–æ–æ—Ç–æ–≤–∞—Ä—ã. –¢–µ–±–µ –¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ–ª–ª—Ü–µ–Ω—Ç—Ä–∞ –æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö, –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö. 

## –ù–∞–≤—ã–∫–∏
1. –ü–æ–ª–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–≤–æ–¥—É –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö —É—Å–ª—É–≥ –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.
2. –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
3. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
4. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ.
5. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–ª–∞–≥–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –≤—Å–µ –ø—É–Ω–∫—Ç—ã –∏ –ø–æ–¥–ø—É–Ω–∫—Ç—ã –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏–∑ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.
6. –ó–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –µ—Å–ª–∏ –æ–Ω –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è.
7. –ù–µ –∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è.

## –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞—Å–∞—é—â–∏–µ—Å—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.
- –ò—Å–ø–æ–ª—å–∑—É–π —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- –ï—Å–ª–∏ —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π.
'''

system_analyser = ''' 
–¢—ã - –Ω–µ–π—Ä–æ-—Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø—Ä–∏—à–µ–ª. 
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–≤–∞–ª —Å–≤–æ–µ –∏–º—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç—Ä–∞–∑–∏ –µ–≥–æ –≤ —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ.
'''

Contactnie_dannie = """
*–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ*

1. *–í–æ—Ä–æ–Ω–µ–∂*
   üìç –í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞, –≤–µ—Ç–∞–ø—Ç–µ–∫–∞: —É–ª. –í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è 44
   üïí –ü–Ω-–í—Å 24 —á–∞—Å–∞
   ‚òéÔ∏è +7(473)300-34-50
   üìç –í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞, –≤–µ—Ç–∞–ø—Ç–µ–∫–∞: —É–ª. –ö–æ–ª—å—Ü–æ–≤—Å–∫–∞—è, 49
   üïí –ü–Ω-–í—Å 24 —á–∞—Å–∞
   ‚òéÔ∏è +7(473)300-34-50
   üìß @zdorovet.ru
"""

def escape_markdown(text):
    """
    Escape special characters for Telegram MarkdownV2.
    """
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

async def get_answer(text, gpt_context='', clients_goods=''):
    db_path = 'faiss_index'
    index_name = "db_from_texts_PP"
    new_db = FAISS.load_local(db_path, embeddings, index_name, allow_dangerous_deserialization=True)
    
    if clients_goods:
        docs = await new_db.asimilarity_search_with_score(clients_goods, k=top_similar_documents)
    else:
        docs = []

    docs = [doc for doc, score in docs if score > trash_hold]
    docs_direct = await new_db.asimilarity_search_with_score(text, k=top_similar_documents)
    docs_direct = [doc for doc, score in docs_direct if score > trash_hold]
    docs.extend(docs_direct)
    
    message_content = ' '.join([f'\n–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ ‚Ññ{i+1}\n=====================' + doc.page_content + '\n' for i, doc in enumerate(docs)])
    question_content = f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤. –î–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {message_content}\n\n"
 
    question_content_2 = question_content + f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \n{text}"
    
    text_user = question_content_2
    if len(gpt_context) > 0:
        text_user = question_content + "\n\n" + gpt_context + "\n\n" + f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \n{text}."
        messages = [
            {"role": "system", "content": system},
            {"role": "user", "content": text_user}
        ]
    else:
        messages = [
            {"role": "system", "content": system},
            {"role": "user", "content": text_user}
        ]
    
    print("–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API OpenAI:", messages)
    
    try:
        completion = await client.chat.completions.create(
            model=model,
            messages=messages,
            temperature=temperature
        )
        print("–û—Ç–≤–µ—Ç API OpenAI:", completion)
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
    
    answer_text = completion.choices[0].message.content
    return answer_text

system_summarize = '''# Character
–¢—ã - –Ω–µ–π—Ä–æ-—Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø—Ä–∏—à–µ–ª. 

## Skills
### Skill 1: 
- –°–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –∏–º–µ–Ω–∞, –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã.

### Skill 2:
- –ü–æ–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º.

## Constraints
- –°–æ–±–ª—é–¥–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∫—Ä–∞—Ç–∫–∏—Ö —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–π.
- –û—Ç—Ä–∞–∂–∞—Ç—å –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã.'''

async def summarize_questions(dialog, context):
    messages = [
        {"role": "system", "content": system_summarize},
        {"role": "user", "content": "–°–∞–º–º–∞—Ä–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + " ".join(dialog)}
    ]

    completion = await client.chat.completions.create(
        model="gpt-4o",
        messages=messages,
        temperature=0,
    )

    return completion.choices[0].message.content

async def create_completion(model, system, content, temperature):
    messages = [
        {"role": "system", "content": system},
        {"role": "user", "content": content}
    ]
    
    completion = await client.chat.completions.create(
        model=model,
        messages=messages,
        temperature=0
    )
    return completion.choices[0].message.content

async def run_model_analyser(topic, existing_goods):
    content = f"–í—ã–¥–µ–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –µ–≥–æ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º. –í—ã–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ —Å–ø–∏—Å–æ–∫ \"{existing_goods}\". –ü–µ—Ä–µ—á–∏—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç, –≤—ã–≤–µ–¥–∏ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –¢–æ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏–ª –∫–ª–∏–µ–Ω—Ç: " + " ".join(topic)
    return await create_completion(model, system_analyser, content, 0)

async def retry_send_message(context, chat_id, text, reply_to_message_id=None, parse_mode=None, max_retries=3):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞.
    """
    for attempt in range(max_retries):
        try:
            await context.bot.send_message(chat_id=chat_id, text=text, reply_to_message_id=reply_to_message_id, parse_mode=parse_mode)
            break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        except telegram.error.TimedOut as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –æ—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            break

async def gpt(update: Update, context: CallbackContext):
    clients_goods = ""
   
    if context.bot_data[update.message.from_user.id]['voprosi'] > 0:
        try:
            first_message = await update.message.reply_text('–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', reply_to_message_id=update.message.message_id)
        except telegram.error.TimedOut as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await retry_send_message(context, update.message.chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_to_message_id=update.message.message_id)
            return
        
        print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", update.message.text)
        
        goods = await run_model_analyser(update.message.text, clients_goods)
        print("–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", goods)
        
        if goods:
            godds_arr = goods.replace(",", " ").replace("  ", " ").split(' ')
            for good in godds_arr:
                if good and good not in clients_goods:
                    clients_goods += ' ' + good
        
        if context.bot_data[update.message.from_user.id]['text'] != '':
            summarized_history = "–í–æ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞: " + await summarize_questions({context.bot_data[update.message.from_user.id]['text'].replace('<marker>','')}, context)
            print("–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏:", summarized_history)
            
            res = await get_answer(update.message.text, summarized_history, clients_goods)
        else:
            full_answer = update.message.text
            res = await get_answer(full_answer, '', clients_goods)
        
        print("–û—Ç–≤–µ—Ç –æ—Ç get_answer:", res)
        
        if len(context.bot_data[update.message.from_user.id]['text'].split('<marker>')) < 5:
            context.bot_data[update.message.from_user.id]['text'] += f"–ö–ª–∏–µ–Ω—Ç: {update.message.text}\n"
            context.bot_data[update.message.from_user.id]['text'] += f"ChatGPT: {res}\n\n<marker>"
        else:
            context.bot_data[update.message.from_user.id]['text'] = '<marker>'.join(context.bot_data[update.message.from_user.id]['text'].split('<marker>')[1:])
            context.bot_data[update.message.from_user.id]['text'] += f"–ö–ª–∏–µ–Ω—Ç: {update.message.text}\n"
            context.bot_data[update.message.from_user.id]['text'] += f"ChatGPT: {res}\n\n<marker>"

        res = res + "\n" + Contactnie_dannie
        res = escape_markdown(res)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã

        try:
            await context.bot.edit_message_text(text=res, chat_id=update.message.chat_id, message_id=first_message.message_id, parse_mode=ParseMode.MARKDOWN_V2)
        except telegram.error.TimedOut as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await retry_send_message(context, update.message.chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_to_message_id=update.message.message_id)
            return
        
        context.bot_data[update.message.from_user.id]['voprosi'] -= 1
    else:
        await update.message.reply_text('–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã')

async def gpt_v(update, context):
    clients_goods = ""
    
    if context.bot_data[update.message.from_user.id]['voprosi'] > 0:
        try:
            first_message = await update.message.reply_text('–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', reply_to_message_id=update.message.message_id)
        except telegram.error.TimedOut as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await retry_send_message(context, update.message.chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_to_message_id=update.message.message_id)
            return
        
        file = await update.message.voice.get_file()
        voice_as_byte = await file.download_as_bytearray()

        byte_voice = BytesIO(voice_as_byte)
        audio = AudioSegment.from_file(byte_voice, format='ogg')
        audio.export('voice_message.mp3', format='mp3') 
        audio_file = open("voice_message.mp3", "rb")
        text = await clientOAI.audio.transcriptions.create(
            model="whisper-1", 
            file=audio_file,
            response_format="text"
        )
        
        goods = await run_model_analyser(text, clients_goods)
        if goods:
            godds_arr = goods.replace(",", " ").replace("  ", " ").split(' ')
            for good in godds_arr:
                if good and not good in clients_goods:
                    clients_goods += ' ' + good 
        
        if context.bot_data[update.message.from_user.id]['text'] != '':
            summarized_history = "–í–æ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞: " + await summarize_questions({context.bot_data[update.message.from_user.id]['text'].replace('<marker>','')}, context) 
            full_answer = summarized_history + "\n\n–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: " + text
            res = await get_answer(text, summarized_history, clients_goods)
        else:
            full_answer = text
            res = await get_answer(full_answer, '', clients_goods)
            
        if len(context.bot_data[update.message.from_user.id]['text'].split('<marker>')) < 5:
            context.bot_data[update.message.from_user.id]['text'] += f"–ö–ª–∏–µ–Ω—Ç: {text}\n"
            context.bot_data[update.message.from_user.id]['text'] += f"ChatGPT: {res}\n\n<marker>"
        else:
            context.bot_data[update.message.from_user.id]['text'] = '<marker>'.join(context.bot_data[update.message.from_user.id]['text'].split('<marker>')[1:])
            context.bot_data[update.message.from_user.id]['text'] += f"–ö–ª–∏–µ–Ω—Ç: {text}\n"
            context.bot_data[update.message.from_user.id]['text'] += f"ChatGPT: {res}\n\n<marker>"

        res = res + "\n" + Contactnie_dannie
        res = escape_markdown(res)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã

        try:
            await context.bot.edit_message_text(text=res, chat_id=update.message.chat_id, message_id=first_message.message_id)
        except telegram.error.TimedOut as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await retry_send_message(context, update.message.chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_to_message_id=update.message.message_id)
            return

        context.bot_data[update.message.from_user.id]['voprosi'] -= 1
    else:
        await update.message.reply_text('–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã')

async def start(update, context):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.first_name
    # Load authorized user IDs from access.txt
    with open('access.txt', 'r') as file:
        authorized_users = file.read().splitlines()

    if str(user_id) not in authorized_users:
        # Log unauthorized access attempt
        with open('users.txt', 'a') as file:
            file.write(f"{datetime.now()} - Received /start command from user_id: {user_id} (username: {username})\n")
        
        await update.message.reply_text('–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        return

    if update.message.from_user.id not in context.bot_data.keys():
        context.bot_data[update.message.from_user.id] = {}
        context.bot_data[update.message.from_user.id]['voprosi'] = 35
        context.bot_data[update.message.from_user.id]['text'] = ''
    
    user = update.effective_user
    await update.message.reply_html(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}! –≠—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º –ó–¥–æ—Ä–æ–≤—å–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö. –¢—ã –º–æ–∂–µ—à—å –º–Ω–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ.")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    del context.bot_data[update.message.from_user.id]
    if update.message.from_user.id not in context.bot_data.keys():
        context.bot_data[update.message.from_user.id] = {}
        context.bot_data[update.message.from_user.id]['voprosi'] = 35
        context.bot_data[update.message.from_user.id]['text'] = ''
    
    await update.message.reply_text('–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã')

async def data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open('data.json', 'w', encoding='utf-8') as fp:
        json.dump(context.bot_data, fp)
    
    await update.message.reply_text('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')  

async def help(update, context):
    user = update.effective_user
    await update.message.reply_html(f"Hi, {user.mention_html()}! –ü–æ–≥–æ–≤–æ—Ä–∏ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º")

async def welcome_message(update, context):
    new_user = update.message.new_chat_members[0]
    await update.message.reply_text(chat_id=update.effective_chat.id,
                             text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_user.first_name}! –Ø –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
    context.bot.pin_chat_message(chat_id=update.effective_chat.id,
                                  message_id=update.message.message_id)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {context.bot_data[update.message.from_user.id]['voprosi']}")

async def callback_daily(context: ContextTypes.DEFAULT_TYPE):
    if context.bot_data != {}:
        for key in context.bot_data:
            context.bot_data[key]['voprosi'] = 20
        print('–ó–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
    else:
        print('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π HTTPXRequest —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    request = HTTPXRequest(http_version="1.1", connect_timeout=30.0, read_timeout=30.0)  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç—ã
    
    application = Application.builder().token(TOKEN).request(request).build()
    
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')

    job_queue = application.job_queue
    job_queue.run_repeating(callback_daily,
                            interval=43200,
                            first=60)
    
    application.add_handler(CommandHandler("start", start, block=False))
    application.add_handler(CommandHandler("help", help, block=False))
    application.add_handler(CommandHandler("status", status, block=False))
    application.add_handler(CommandHandler("data", data, block=False))
    application.add_handler(CommandHandler("reset", reset, block=False))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.REPLY, gpt, block=False))
    application.add_handler(MessageHandler(filters.VOICE, gpt_v, block=False))
    application.add_handler(ChatMemberHandler(welcome_message, ChatMemberHandler.CHAT_MEMBER))
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    print('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

if __name__ == "__main__":
    main()
