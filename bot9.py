import os
import re
import sqlite3
from typing import Optional
import logging
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from pydub import AudioSegment
from openai import AsyncOpenAI
from dotenv import load_dotenv
from io import BytesIO
from typing import Dict
from telegram import Update
from telegram.constants import ParseMode
from telegram import Bot
from telegram.constants import ChatAction
import asyncio
import telegram.error
from telegram.ext import (
    Application,
    CommandHandler,
    ChatMemberHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext,
    Defaults
)
from telegram import InlineKeyboardMarkup
from pydub.playback import play
import json
from datetime import datetime
from telegram.request import HTTPXRequest  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º HTTPXRequest –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get("TOKEN")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∞–π–º–∞—É—Ç–∞
bot = Bot(token=TOKEN)

clientOAI = AsyncOpenAI()   
MODEL_TURBO_0125 = "gpt-3.5-turbo-0125"
MODEL_VI = "gpt-4-vision-preview"
MODEL_4 = "gpt-4"
model_4o_mini = 'gpt-4o-mini'
model_4o = 'gpt-4o'
model = model_4o_mini

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

url_BZ = ''
temperature = 0
count_type = ''
top_similar_documents = 7
trash_hold = 0 

#embeddings = OpenAIEmbeddings()
#embeddings = OpenAIEmbeddings(model="text-embedding-ada-002")
embeddings = OpenAIEmbeddings(model="text-embedding-3-large")
client = AsyncOpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

system = '''
# –ü–µ—Ä—Å–æ–Ω–∞–∂
–¢—ã-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤ —Å–µ—Ç–∏ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫ –ó–¥–æ—Ä–æ–≤—å–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è –æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ–¥–∞–µ—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –∏ –∑–æ–æ—Ç–æ–≤–∞—Ä—ã. –¢–µ–±–µ –¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ–ª–ª—Ü–µ–Ω—Ç—Ä–∞ –æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö, –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∞–∫ –µ–≥–æ –∏–º—è —Ç–æ –æ—Ç–≤–µ—Ç—å. 

## –ù–∞–≤—ã–∫–∏
1. –ü–æ–ª–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–≤–æ–¥—É –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö —É—Å–ª—É–≥ –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.
2. –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
3. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
4. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ.
5. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–ª–∞–≥–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –≤—Å–µ –ø—É–Ω–∫—Ç—ã –∏ –ø–æ–¥–ø—É–Ω–∫—Ç—ã –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏–∑ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.
6. –ó–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –µ—Å–ª–∏ –æ–Ω –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è.
7. –ù–µ –∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è.
8. –ò–º–µ–Ω–∞, —Ñ–∞–º–∏–ª–∏–∏ –∏ –æ—Ç—á–µ—Å—Ç–≤–∞, –∞ —Ç–∞–∫ –∂–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü –≤ –æ—Ç–≤–µ—Ç–µ –ø–∏—à–∏ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã.

## –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞—Å–∞—é—â–∏–µ—Å—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.
- –ò—Å–ø–æ–ª—å–∑—É–π —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- –ï—Å–ª–∏ —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π.
'''

system_analyser = ''' 
–¢—ã - –Ω–µ–π—Ä–æ-—Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø—Ä–∏—à–µ–ª. 
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–≤–∞–ª —Å–≤–æ–µ –∏–º—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç—Ä–∞–∑–∏ –µ–≥–æ –≤ —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ.
'''

Contactnie_dannie = """
*–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ*

1. *–í–æ—Ä–æ–Ω–µ–∂*
   üìç –í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞, –≤–µ—Ç–∞–ø—Ç–µ–∫–∞: —É–ª. –í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è 44
   üïí –ü–Ω-–í—Å 24 —á–∞—Å–∞
   ‚òéÔ∏è +7(473)300-34-50
   üìç –í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞, –≤–µ—Ç–∞–ø—Ç–µ–∫–∞: —É–ª. –ö–æ–ª—å—Ü–æ–≤—Å–∫–∞—è, 49
   üïí –ü–Ω-–í—Å 24 —á–∞—Å–∞
   ‚òéÔ∏è +7(473)300-34-50
   üìß @zdorovet.ru
"""

def escape_markdown(text: str):
    """
    Escape special characters for Telegram MarkdownV2.
    """
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
def create_database():
    conn = sqlite3.connect('questions.db')
    c = conn.cursor()
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ—Ü–µ–Ω–æ–∫
    c.execute('''CREATE TABLE IF NOT EXISTS questions (
                 id INTEGER PRIMARY KEY,
                 user_id INTEGER,
                 username TEXT,   
                 question TEXT,
                 question_time DATETIME,
                 answer TEXT,
                 answer_time DATETIME,
                 rating INTEGER)''')
    conn.commit()
    conn.close()

create_database()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_question(user_id: int, question: str):
    conn = sqlite3.connect('questions.db')
    c = conn.cursor()
    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É
    c.execute('''INSERT INTO questions (user_id, question, question_time)
                 VALUES (?, ?, datetime('now'))''', (user_id, question))
    conn.commit()
    question_id = c.lastrowid
    conn.close()
    return question_id

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
def save_answer(question_id: int, answer: str):
    conn = sqlite3.connect('questions.db')
    c = conn.cursor()
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    c.execute('''UPDATE questions
                 SET answer = ?, answer_time = datetime('now')
                 WHERE id = ?''', (answer, question_id))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞
def save_rating(question_id: int, rating: int):
    conn = sqlite3.connect('questions.db')
    c = conn.cursor()
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    c.execute('''UPDATE questions
                 SET rating = ?
                 WHERE id = ?''', (rating, question_id))
    conn.commit()
    conn.close()

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö FAISS –∏ –∏–º—è –∏–Ω–¥–µ–∫—Å–∞
db_path = 'faiss_index'
index_name = "db_from_texts_PP"
new_db = FAISS.load_local(db_path, embeddings, index_name, allow_dangerous_deserialization=True)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
async def get_answer(text: str, gpt_context: str='', clients_goods: str='')->str: ####
    logger.info(f'–∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ [get_answer] {text}')
    # –ü–æ–∏—Å–∫ —Å—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    docs = []
    docs_direct = await new_db.asimilarity_search_with_score(text, include_metadata=True, k=top_similar_documents)
    docs_direct = [doc for doc, score in docs_direct if score > trash_hold]
    docs.extend(docs_direct)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –º–æ–¥–µ–ª–∏ –æ—Ç–≤–µ—Ç
    message_content = ' '.join([f'\n–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ ‚Ññ{i+1}\n=====================' + doc.page_content + '\n' for i, doc in enumerate(docs)])
    question_content = f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤. –î–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {message_content}\n\n"
    question_content_2 = question_content + f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \n{text}"
    text_user = question_content_2
    print(f'{text_user} \n')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if len(gpt_context) > 0:
        text_user = question_content + "\n\n" + gpt_context + "\n\n" + f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \n{text}."
        messages = [
            {"role": "system", "content": system},
            {"role": "user", "content": text_user}
        ]
    else:
        messages = [
            {"role": "system", "content": system},
            {"role": "user", "content": text_user}
        ]
    
    print("–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API OpenAI:", messages)
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ OpenAI
        completion = await client.chat.completions.create(
            model=model,
            messages=messages,
            temperature=temperature
        )
        print("–û—Ç–≤–µ—Ç API OpenAI:", completion)
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
    
    answer_text = completion.choices[0].message.content
    print(f'{answer_text} \n')
    return answer_text
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
system_summarize = '''# Character
–¢—ã - –Ω–µ–π—Ä–æ-—Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø—Ä–∏—à–µ–ª. 

## Skills
### Skill 1: 
- –°–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –∏–º–µ–Ω–∞, –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã.

### Skill 2:
- –ü–æ–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º.

## Constraints
- –°–æ–±–ª—é–¥–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∫—Ä–∞—Ç–∫–∏—Ö —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–π.
- –û—Ç—Ä–∞–∂–∞—Ç—å –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã.'''

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞
async def summarize_questions(dialog: str, context: str)->str:
    messages = [
        {"role": "system", "content": system_summarize},
        {"role": "user", "content": "–°–∞–º–º–∞—Ä–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + " ".join(dialog)}
    ]

    completion = await client.chat.completions.create(
        model="gpt-4o",
        messages=messages,
        temperature=0,
    )
    #print("*****1111****,", type(completion.choices[0].message.content))
    return completion.choices[0].message.content

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ 
async def create_completion(model, system, content, temperature: int=0):
    messages = [
        {'role': 'system', 'content': system},
        {'role': 'user', 'content': content}
    ]
    completion = await client.chat.completions.create(
    model=model,
    messages=messages,
    temperature=temperature
    )
    return completion.choices[0].message.content

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async def run_model_analyser(topic:str, existing_goods: Optional[str]) -> str:
    logger.info(f'–ü–∞—Ä–∞–º–µ—Ç—Ä existing_goods —Ñ—É–Ω–∫—Ü–∏–∏ run_model_analyser {existing_goods}')
    #content = f'–í—ã–¥–µ–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –µ–≥–æ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º. –í—ã–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ —Å–ø–∏—Å–æ–∫ "{existing_goods}". –ü–µ—Ä–µ—á–∏—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç, –≤—ã–≤–µ–¥–∏ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –¢–æ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏–ª –∫–ª–∏–µ–Ω—Ç: ' + " ".join(topic)
    content = f'–í—ã–¥–µ–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –µ–≥–æ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º.  –ü–µ—Ä–µ—á–∏—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.  –¢–æ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏–ª –∫–ª–∏–µ–Ω—Ç: ' + " ".join(topic)
    return await create_completion(model, system_analyser, content, 0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞
async def retry_send_message(context, chat_id, text, reply_to_message_id: Optional[str] = None, parse_mode=None, max_retries=3):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞.
    """
    for attempt in range(max_retries):
        try:
            await context.bot.send_message(chat_id=chat_id, text=text, reply_to_message_id=reply_to_message_id, parse_mode=parse_mode)
            break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        except telegram.error.TimedOut as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –æ—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            break

from telegram.ext import filters

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def gpt(update: Update, context: CallbackContext):
    logger.info(f'–∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ [gpt] —ç—Ç–æ update-{update}, —ç—Ç–æ context-{context}')
    clients_goods = ""
    user_id = update.message.from_user.id
    question = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ü–µ–Ω–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if question.isdigit() and 'current_question_id' in context.user_data:
        await handle_rating(update, context)
        return
    
    question_id = save_question(user_id, question)
   
    if context.bot_data[update.message.from_user.id]['voprosi'] > 0:
        first_message = await update.message.reply_text(
            '–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...',
            reply_to_message_id=update.message.message_id,
            reply_markup=InlineKeyboardMarkup([])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
        )

        goods = await run_model_analyser(question, clients_goods)
        if goods:
            godds_arr = goods.replace(",", " ").replace("  ", " ").split(' ')
            for good in godds_arr:
                if good and good not in clients_goods:
                    clients_goods += ' ' + good

        if context.bot_data[update.message.from_user.id]['text'] != '':
            summarized_history = "–í–æ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞: " + await summarize_questions({context.bot_data[update.message.from_user.id]['text'].replace('<marker>','')}, context)
            res = await get_answer(question, summarized_history, clients_goods)
        else:
            res = await get_answer(question, '', clients_goods)
        
        context.bot_data[update.message.from_user.id]['text'] += f"–ö–ª–∏–µ–Ω—Ç: {question}\nChatGPT: {res}\n\n<marker>"
        res += "\n" + Contactnie_dannie
        res = escape_markdown(res)

        await context.bot.edit_message_text(
            text=res,
            chat_id=update.message.chat_id,
            message_id=first_message.message_id,
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=InlineKeyboardMarkup([])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_answer(question_id, res)

        # –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç 1 –¥–æ 3 (1-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, 2-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ –Ω–µ –≤–µ—Ä–Ω–∞, 3-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–µ—Ä–Ω–∞).",
            reply_markup=InlineKeyboardMarkup([])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ—Ü–µ–Ω–∫–∏
        context.user_data['current_question_id'] = question_id

        context.bot_data[update.message.from_user.id]['voprosi'] -= 1
    else:
        await update.message.reply_text(
            '–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã',
            reply_markup=InlineKeyboardMarkup([])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
        )

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# async def handle_rating(update: Update, context: CallbackContext):
#     rating_text = update.message.text
#     question_id = context.user_data.get('current_question_id')
    
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ü–µ–Ω–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
#     if question_id is not None:
#         try:
#             rating = int(rating_text)
#             if rating in [1, 2, 3]:
#                 save_rating(question_id, rating)
#                 await update.message.reply_text(
#                     "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!",
#                     reply_markup=InlineKeyboardMarkup([])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
#                 )
#             else:
#                 await update.message.reply_text(
#                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–æ—Ç 1 –¥–æ 3).",
#                     reply_markup=InlineKeyboardMarkup([])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
#                 )
#         except ValueError:
#             await update.message.reply_text(
#                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 3.",
#                 reply_markup=InlineKeyboardMarkup([])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
#             )
#     else:
#         await update.message.reply_text(
#             "–ù–µ –Ω–∞–π–¥–µ–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.",
#             reply_markup=InlineKeyboardMarkup([])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
#         )
#     # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
#     context.user_data['current_question_id'] = None

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def gpt_v(update, context):
    clients_goods = ""
    user_id = update.message.from_user.id
    if context.bot_data[update.message.from_user.id]['voprosi'] > 0:
        first_message = await update.message.reply_text('–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', reply_to_message_id=update.message.message_id)
    
        file = await update.message.voice.get_file() # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞
        voice_as_byte = await file.download_as_bytearray() # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º file –≤ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç

        byte_voice = BytesIO(voice_as_byte) #–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º voice_as_byte –≤ –æ–±—ä–µ–∫—Ç BytesIO
        audio = AudioSegment.from_file(byte_voice, format='ogg') # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pydub 
        audio.export('voice_message.mp3', format='mp3') # –°–æ—Ö—Ä–∞–Ω—è–µ–º audio –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª voice_message.mp3
        audio_file = open("voice_message.mp3", "rb")
        text = await clientOAI.audio.transcriptions.create(
            model="whisper-1", 
            file=audio_file,
            response_format="text"
        ) # MP3-—Ñ–∞–π–ª –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –º–æ–¥–µ–ª–∏ OpenAI Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç
    
        question_id = save_question(user_id, text)

        goods = await run_model_analyser(text, clients_goods)
        if goods:
            godds_arr = goods.replace(",", " ").replace("  ", " ").split(' ')
            for good in godds_arr:
                if good and not good in clients_goods:
                    clients_goods += ' ' + good 
    
        if context.bot_data[update.message.from_user.id]['text'] != '':
            summarized_history = "–í–æ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞: " + await summarize_questions({context.bot_data[update.message.from_user.id]['text'].replace('<marker>','')}, context) 
            res = await get_answer(text, summarized_history, clients_goods)
        else:
            res = await get_answer(text, '', clients_goods)
        
        context.bot_data[update.message.from_user.id]['text'] += f"–ö–ª–∏–µ–Ω—Ç: {text}\nChatGPT: {res}\n\n<marker>"

        res = res + "\n" + Contactnie_dannie
        res = escape_markdown(res)

        await context.bot.edit_message_text(text=res, chat_id=update.message.chat_id, message_id=first_message.message_id)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_answer(question_id, res)

        # –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(chat_id=update.message.chat_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç 1 –¥–æ 3 (1-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, 2-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ –Ω–µ –≤–µ—Ä–Ω–∞, 3-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–µ—Ä–Ω–∞).")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ—Ü–µ–Ω–∫–∏
        context.user_data['current_question_id'] = question_id

        context.bot_data[update.message.from_user.id]['voprosi'] -= 1
    else:
        await update.message.reply_text('–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_rating(update: Update, context: CallbackContext):
    rating_text = update.message.text
    question_id = context.user_data.get('current_question_id')
    
    if question_id is not None:
        try:
            rating = int(rating_text)
            if rating in [1, 2, 3]:
                save_rating(question_id, rating)
                await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–æ—Ç 1 –¥–æ 3).")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 3.")
    else:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.first_name
    # Load authorized user IDs from access.txt
    with open('access.txt', 'r') as file:
        authorized_users = file.read().splitlines()

    if str(user_id) not in  authorized_users:
    # Log unauthorized access attempt
        with open('users.txt', 'a') as file:
            file.write(f"{datetime.now()} - –ü—Ä–∏–Ω—è—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id: {user_id} (username: {username})\n")
        
        await update.message.reply_text('–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        return

    if update.message.from_user.id not in context.bot_data.keys():
        context.bot_data[update.message.from_user.id] = {}
        context.bot_data[update.message.from_user.id]['voprosi'] = 35
        context.bot_data[update.message.from_user.id]['text'] = ''

    user = update.effective_user
    await update.message.reply_html(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}! –≠—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º –ó–¥–æ—Ä–æ–≤—å–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö. –¢—ã –º–æ–∂–µ—à—å –º–Ω–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ.")

# –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    del context.bot_data[update.message.from_user.id]
    if update.message.from_user.id not in context.bot_data.keys():
        context.bot_data[update.message.from_user.id] = {}
        context.bot_data[update.message.from_user.id]['voprosi'] = 35
        context.bot_data[update.message.from_user.id]['text'] = ''
    await update.message.reply_text('–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
async def data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open ('data.json', 'w', encoding='utf-8') as fp:
        json.dump(context.bot_data, fp)
    await update.message.reply_text('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')  

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
async def help(update, context):
    user = update.effective_user
    await update.message.reply_html(f'Hi, {user.mention_html()}! –ü–æ–≥–æ–≤–æ—Ä–∏ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º')

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def welcome_message(update, context):
    new_user = update.message.new_chat_members[0]
    await update.message.reply_text(chat_id=update.effective_chat.id,
        text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_user.first_name}! –Ø –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.')
    context.bot.pin_chat_message(chat_id=update.effective_chat.id,
        message_id=update.message.message_id)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f'–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {context.bot_data[update.message.from_user.id]["voprosi"]}')

# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def callback_daily(context: ContextTypes.DEFAULT_TYPE):
    if context.bot_data != {}:
            for key in context.bot_data:
                context.bot_data[key]['voprosi'] = 20
            print('–ó–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
    else:
            print('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    request = HTTPXRequest(http_version="1.1", connect_timeout=30.0, read_timeout=30.0)
    application = Application.builder().token(TOKEN).request(request).build()

    job_queue = application.job_queue
    job_queue.run_repeating(callback_daily, interval=43200, first=60)
    
    application.add_handler(CommandHandler("start", start, block=False))
    application.add_handler(CommandHandler("help", help, block=False))
    application.add_handler(CommandHandler("status", status, block=False))
    application.add_handler(CommandHandler("data", data, block=False))
    application.add_handler(CommandHandler("reset", reset, block=False))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.REPLY, gpt, block=False))
    application.add_handler(MessageHandler(filters.VOICE, gpt_v, block=False))
    application.add_handler(MessageHandler(filters.Regex(r'^\d+$'), handle_rating, block=False))
    application.add_handler(ChatMemberHandler(welcome_message, ChatMemberHandler.CHAT_MEMBER))
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    print('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

if __name__ == '__main__':
    main()